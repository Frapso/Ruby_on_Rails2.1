var search_data = {"index":{"searchIndex":["rack","mocksession","test","cookie","cookiejar","error","methods","mockdigestrequest","session","uploadedfile","utils","authorize()","basic_authorize()","default_env()","delete()","digest_auth_configured?()","digest_auth_header()","digest_authorize()","encoding_aware_strings?()","env()","env_for()","follow_redirect!()","get()","head()","header()","headers_for_env()","local_path()","new()","new()","options()","params_to_string()","patch()","path()","post()","process_request()","put()","request()","retry_with_digest_auth?()","mit-license","readme"],"longSearchIndex":["rack","rack::mocksession","rack::test","rack::test::cookie","rack::test::cookiejar","rack::test::error","rack::test::methods","rack::test::mockdigestrequest","rack::test::session","rack::test::uploadedfile","rack::test::utils","rack::test::session#authorize()","rack::test::session#basic_authorize()","rack::test::session#default_env()","rack::test::session#delete()","rack::test::session#digest_auth_configured?()","rack::test::session#digest_auth_header()","rack::test::session#digest_authorize()","rack::test::encoding_aware_strings?()","rack::test::session#env()","rack::test::session#env_for()","rack::test::session#follow_redirect!()","rack::test::session#get()","rack::test::session#head()","rack::test::session#header()","rack::test::session#headers_for_env()","rack::test::uploadedfile#local_path()","rack::test::session::new()","rack::test::uploadedfile::new()","rack::test::session#options()","rack::test::session#params_to_string()","rack::test::session#patch()","rack::test::uploadedfile#path()","rack::test::session#post()","rack::test::session#process_request()","rack::test::session#put()","rack::test::session#request()","rack::test::session#retry_with_digest_auth?()","",""],"info":[["Rack","","Rack.html","",""],["Rack::MockSession","","Rack/MockSession.html","",""],["Rack::Test","","Rack/Test.html","",""],["Rack::Test::Cookie","","Rack/Test/Cookie.html","",""],["Rack::Test::CookieJar","","Rack/Test/CookieJar.html","",""],["Rack::Test::Error","","Rack/Test/Error.html","","<p>The common base class for exceptions raised by Rack::Test\n"],["Rack::Test::Methods","","Rack/Test/Methods.html","","<p>This module serves as the primary integration point for using Rack::Test in\na testing environment. It …\n"],["Rack::Test::MockDigestRequest","","Rack/Test/MockDigestRequest.html","",""],["Rack::Test::Session","","Rack/Test/Session.html","","<p>This class represents a series of requests issued to a Rack app, sharing a\nsingle cookie jar\n<p>Rack::Test::Session&#39;s …\n"],["Rack::Test::UploadedFile","","Rack/Test/UploadedFile.html","","<p>Wraps a Tempfile with a content type. Including one or more\nUploadedFile&#39;s in the params causes  …\n"],["Rack::Test::Utils","","Rack/Test/Utils.html","",""],["authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-authorize","(username, password)",""],["basic_authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-basic_authorize","(username, password)","<p>Set the username and password for HTTP Basic authorization, to be included\nin subsequent requests in …\n"],["default_env","Rack::Test::Session","Rack/Test/Session.html#method-i-default_env","()",""],["delete","Rack::Test::Session","Rack/Test/Session.html#method-i-delete","(uri, params = {}, env = {}, &block)","<p>Issue a DELETE request for the given URI. See #get\n<p>Example:\n\n<pre>delete &quot;/&quot;</pre>\n"],["digest_auth_configured?","Rack::Test::Session","Rack/Test/Session.html#method-i-digest_auth_configured-3F","()",""],["digest_auth_header","Rack::Test::Session","Rack/Test/Session.html#method-i-digest_auth_header","()",""],["digest_authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-digest_authorize","(username, password)","<p>Set the username and password for HTTP Digest authorization, to be included\nin subsequent requests in …\n"],["encoding_aware_strings?","Rack::Test","Rack/Test.html#method-c-encoding_aware_strings-3F","()",""],["env","Rack::Test::Session","Rack/Test/Session.html#method-i-env","(name, value)","<p>Set an env var to be included on all subsequent requests through the\nsession. Use a value of nil to remove …\n"],["env_for","Rack::Test::Session","Rack/Test/Session.html#method-i-env_for","(path, env)",""],["follow_redirect!","Rack::Test::Session","Rack/Test/Session.html#method-i-follow_redirect-21","()","<p>Rack::Test will not follow any redirects automatically. This method will\nfollow the redirect returned …\n"],["get","Rack::Test::Session","Rack/Test/Session.html#method-i-get","(uri, params = {}, env = {}, &block)","<p>Issue a GET request for the given URI with the given params and Rack\nenvironment. Stores the issues request …\n"],["head","Rack::Test::Session","Rack/Test/Session.html#method-i-head","(uri, params = {}, env = {}, &block)","<p>Issue a HEAD request for the given URI. See #get\n<p>Example:\n\n<pre>head &quot;/&quot;</pre>\n"],["header","Rack::Test::Session","Rack/Test/Session.html#method-i-header","(name, value)","<p>Set a header to be included on all subsequent requests through the session.\nUse a value of nil to remove …\n"],["headers_for_env","Rack::Test::Session","Rack/Test/Session.html#method-i-headers_for_env","()",""],["local_path","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-i-local_path","()",""],["new","Rack::Test::Session","Rack/Test/Session.html#method-c-new","(mock_session)","<p>Creates a Rack::Test::Session for a given Rack app or Rack::MockSession.\n<p>Note: Generally, you won&#39;t …\n"],["new","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-c-new","(path, content_type = \"text/plain\", binary = false)",""],["options","Rack::Test::Session","Rack/Test/Session.html#method-i-options","(uri, params = {}, env = {}, &block)","<p>Issue an OPTIONS request for the given URI. See #get\n<p>Example:\n\n<pre>options &quot;/&quot;</pre>\n"],["params_to_string","Rack::Test::Session","Rack/Test/Session.html#method-i-params_to_string","(params)",""],["patch","Rack::Test::Session","Rack/Test/Session.html#method-i-patch","(uri, params = {}, env = {}, &block)","<p>Issue a PATCH request for the given URI. See #get\n<p>Example:\n\n<pre>patch &quot;/&quot;</pre>\n"],["path","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-i-path","()",""],["post","Rack::Test::Session","Rack/Test/Session.html#method-i-post","(uri, params = {}, env = {}, &block)","<p>Issue a POST request for the given URI. See #get\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">post</span> <span class=\"ruby-string\">&quot;/signup&quot;</span>, <span class=\"ruby-string\">&quot;name&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;Bryan&quot;</span>\n</pre>\n"],["process_request","Rack::Test::Session","Rack/Test/Session.html#method-i-process_request","(uri, env)",""],["put","Rack::Test::Session","Rack/Test/Session.html#method-i-put","(uri, params = {}, env = {}, &block)","<p>Issue a PUT request for the given URI. See #get\n<p>Example:\n\n<pre>put &quot;/&quot;</pre>\n"],["request","Rack::Test::Session","Rack/Test/Session.html#method-i-request","(uri, env = {}, &block)","<p>Issue a request to the Rack app for the given URI and optional Rack\nenvironment. Stores the issues request …\n"],["retry_with_digest_auth?","Rack::Test::Session","Rack/Test/Session.html#method-i-retry_with_digest_auth-3F","(env)",""],["MIT-LICENSE","","MIT-LICENSE_txt.html","","<p>Copyright © 2008-2009 Bryan Helmkamp, Engine Yard Inc.\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_rdoc.html","","<p>Rack::Test <img src=\"https://codeclimate.com/github/brynary/rack-test.png\" /> <img src=“https://codeclimate.com/github/brynary/rack-test/coverage.png” …\n"]]}}