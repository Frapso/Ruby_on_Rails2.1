var search_data = {"index":{"searchIndex":["globalid","identification","locator","activerecordfinder","blocklocator","railtie","activesupport","signedglobalid","expiredmessage","uri","gid","==()","==()","app=()","build()","check_host()","check_path()","check_scheme()","create()","create()","encoded_expiration()","find()","find_allowed?()","locate()","locate()","locate()","locate_many()","locate_many_signed()","locate_signed()","locator_for()","model_class()","new()","new()","new()","normalize_app()","parse()","parse()","parse()","parse_allowed()","parse_encoded_gid()","parse_query_params()","pick_expiration()","pick_purpose()","pick_verifier()","query=()","raise_if_expired()","repad_gid()","set_model_components()","set_params()","set_path()","set_query()","to_gid()","to_gid_param()","to_global_id()","to_h()","to_param()","to_param()","to_s()","to_s()","to_sgid()","to_sgid_param()","to_signed_global_id()","use()","validate_app()","validate_component()","verify()"],"longSearchIndex":["globalid","globalid::identification","globalid::locator","globalid::locator::activerecordfinder","globalid::locator::blocklocator","globalid::railtie","globalid::railtie::activesupport","signedglobalid","signedglobalid::expiredmessage","uri","uri::gid","globalid#==()","signedglobalid#==()","globalid#app=()","uri::gid#build()","uri::gid#check_host()","uri::gid#check_path()","uri::gid#check_scheme()","globalid#create()","uri::gid#create()","signedglobalid#encoded_expiration()","globalid#find()","globalid::locator#find_allowed?()","globalid::locator#locate()","globalid::locator::activerecordfinder#locate()","globalid::locator::blocklocator#locate()","globalid::locator#locate_many()","globalid::locator#locate_many_signed()","globalid::locator#locate_signed()","globalid::locator#locator_for()","globalid#model_class()","globalid::new()","globalid::locator::blocklocator::new()","signedglobalid::new()","globalid::locator#normalize_app()","globalid#parse()","signedglobalid#parse()","uri::gid#parse()","globalid::locator#parse_allowed()","globalid#parse_encoded_gid()","uri::gid#parse_query_params()","signedglobalid#pick_expiration()","signedglobalid#pick_purpose()","signedglobalid#pick_verifier()","uri::gid#query=()","signedglobalid#raise_if_expired()","globalid#repad_gid()","uri::gid#set_model_components()","uri::gid#set_params()","uri::gid#set_path()","uri::gid#set_query()","globalid::identification#to_gid()","globalid::identification#to_gid_param()","globalid::identification#to_global_id()","signedglobalid#to_h()","globalid#to_param()","signedglobalid#to_param()","signedglobalid#to_s()","uri::gid#to_s()","globalid::identification#to_sgid()","globalid::identification#to_sgid_param()","globalid::identification#to_signed_global_id()","globalid::locator#use()","uri::gid#validate_app()","uri::gid#validate_component()","signedglobalid#verify()"],"info":[["GlobalID","","GlobalID.html","",""],["GlobalID::Identification","","GlobalID/Identification.html","",""],["GlobalID::Locator","","GlobalID/Locator.html","",""],["GlobalID::Locator::ActiveRecordFinder","","GlobalID/Locator/ActiveRecordFinder.html","",""],["GlobalID::Locator::BlockLocator","","GlobalID/Locator/BlockLocator.html","",""],["GlobalID::Railtie","","GlobalID/Railtie.html","",""],["GlobalID::Railtie::ActiveSupport","","GlobalID/Railtie/ActiveSupport.html","",""],["SignedGlobalID","","SignedGlobalID.html","",""],["SignedGlobalID::ExpiredMessage","","SignedGlobalID/ExpiredMessage.html","",""],["URI","","URI.html","",""],["URI::GID","","URI/GID.html","",""],["==","GlobalID","GlobalID.html#method-i-3D-3D","(other)",""],["==","SignedGlobalID","SignedGlobalID.html#method-i-3D-3D","(other)",""],["app=","GlobalID","GlobalID.html#method-i-app-3D","(app)",""],["build","URI::GID","URI/GID.html#method-i-build","(args)","<p>Create a new URI::GID from components with argument check.\n<p>The allowed components are app, model_name …\n"],["check_host","URI::GID","URI/GID.html#method-i-check_host","(host)",""],["check_path","URI::GID","URI/GID.html#method-i-check_path","(path)",""],["check_scheme","URI::GID","URI/GID.html#method-i-check_scheme","(scheme)",""],["create","GlobalID","GlobalID.html#method-i-create","(model, options = {})",""],["create","URI::GID","URI/GID.html#method-i-create","(app, model, params = nil)","<p>Shorthand to build a URI::GID from an app, a model and optional params.\n\n<pre>URI::GID.create(&#39;bcx&#39;, Person.find(5), ...</pre>\n"],["encoded_expiration","SignedGlobalID","SignedGlobalID.html#method-i-encoded_expiration","()",""],["find","GlobalID","GlobalID.html#method-i-find","(gid, options = {})",""],["find_allowed?","GlobalID::Locator","GlobalID/Locator.html#method-i-find_allowed-3F","(model_class, only = nil)",""],["locate","GlobalID::Locator","GlobalID/Locator.html#method-i-locate","(gid, options = {})","<p>Takes either a GlobalID or a string that can be turned into a GlobalID\n<p>Options:\n<p><code>:only</code> - A class, module …\n"],["locate","GlobalID::Locator::ActiveRecordFinder","GlobalID/Locator/ActiveRecordFinder.html#method-i-locate","(gid)",""],["locate","GlobalID::Locator::BlockLocator","GlobalID/Locator/BlockLocator.html#method-i-locate","(gid)",""],["locate_many","GlobalID::Locator","GlobalID/Locator.html#method-i-locate_many","(gids, options = {})","<p>Takes an array of GlobalIDs or strings that can be turned into a GlobalIDs.\nThe GlobalIDs are located …\n"],["locate_many_signed","GlobalID::Locator","GlobalID/Locator.html#method-i-locate_many_signed","(sgids, options = {})","<p>Takes an array of SignedGlobalIDs or strings that can be turned into a\nSignedGlobalIDs. The SignedGlobalIDs …\n"],["locate_signed","GlobalID::Locator","GlobalID/Locator.html#method-i-locate_signed","(sgid, options = {})","<p>Takes either a SignedGlobalID or a string that can be turned into a\nSignedGlobalID\n<p>Options:\n<p><code>:only</code> - A class, …\n"],["locator_for","GlobalID::Locator","GlobalID/Locator.html#method-i-locator_for","(gid)",""],["model_class","GlobalID","GlobalID.html#method-i-model_class","()",""],["new","GlobalID","GlobalID.html#method-c-new","(gid, options = {})",""],["new","GlobalID::Locator::BlockLocator","GlobalID/Locator/BlockLocator.html#method-c-new","(block)",""],["new","SignedGlobalID","SignedGlobalID.html#method-c-new","(gid, options = {})",""],["normalize_app","GlobalID::Locator","GlobalID/Locator.html#method-i-normalize_app","(app)",""],["parse","GlobalID","GlobalID.html#method-i-parse","(gid, options = {})",""],["parse","SignedGlobalID","SignedGlobalID.html#method-i-parse","(sgid, options = {})",""],["parse","URI::GID","URI/GID.html#method-i-parse","(uri)","<p>Create a new URI::GID by parsing a gid string with argument check.\n\n<pre>URI::GID.parse &#39;gid://bcx/Person/1?key=value&#39;</pre>\n"],["parse_allowed","GlobalID::Locator","GlobalID/Locator.html#method-i-parse_allowed","(gids, only = nil)",""],["parse_encoded_gid","GlobalID","GlobalID.html#method-i-parse_encoded_gid","(gid, options)",""],["parse_query_params","URI::GID","URI/GID.html#method-i-parse_query_params","(query)",""],["pick_expiration","SignedGlobalID","SignedGlobalID.html#method-i-pick_expiration","(options)",""],["pick_purpose","SignedGlobalID","SignedGlobalID.html#method-i-pick_purpose","(options)",""],["pick_verifier","SignedGlobalID","SignedGlobalID.html#method-i-pick_verifier","(options)","<p>Grab the verifier from options and fall back to SignedGlobalID.verifier.\nRaise ArgumentError if neither …\n"],["query=","URI::GID","URI/GID.html#method-i-query-3D","(query)","<p>Ruby 2.2 uses #query= instead of #set_query\n"],["raise_if_expired","SignedGlobalID","SignedGlobalID.html#method-i-raise_if_expired","(expires_at)",""],["repad_gid","GlobalID","GlobalID.html#method-i-repad_gid","(gid)","<p>We removed the base64 padding character = during #to_param, now we&#39;re\nadding it back so decoding …\n"],["set_model_components","URI::GID","URI/GID.html#method-i-set_model_components","(path, validate = false)",""],["set_params","URI::GID","URI/GID.html#method-i-set_params","(params)",""],["set_path","URI::GID","URI/GID.html#method-i-set_path","(path)",""],["set_query","URI::GID","URI/GID.html#method-i-set_query","(query)","<p>Ruby 2.1 or less uses #set_query to assign the query\n"],["to_gid","GlobalID::Identification","GlobalID/Identification.html#method-i-to_gid","()",""],["to_gid_param","GlobalID::Identification","GlobalID/Identification.html#method-i-to_gid_param","()",""],["to_global_id","GlobalID::Identification","GlobalID/Identification.html#method-i-to_global_id","()",""],["to_h","SignedGlobalID","SignedGlobalID.html#method-i-to_h","()",""],["to_param","GlobalID","GlobalID.html#method-i-to_param","()",""],["to_param","SignedGlobalID","SignedGlobalID.html#method-i-to_param","()",""],["to_s","SignedGlobalID","SignedGlobalID.html#method-i-to_s","()",""],["to_s","URI::GID","URI/GID.html#method-i-to_s","()",""],["to_sgid","GlobalID::Identification","GlobalID/Identification.html#method-i-to_sgid","(options = {})",""],["to_sgid_param","GlobalID::Identification","GlobalID/Identification.html#method-i-to_sgid_param","(options = {})",""],["to_signed_global_id","GlobalID::Identification","GlobalID/Identification.html#method-i-to_signed_global_id","(options = {})",""],["use","GlobalID::Locator","GlobalID/Locator.html#method-i-use","(app, locator = nil, &locator_block)","<p>Tie a locator to an app. Useful when different apps collaborate and\nreference each others&#39; Global …\n"],["validate_app","URI::GID","URI/GID.html#method-i-validate_app","(app)","<p>Validates <code>app</code>&#39;s as URI hostnames containing only\nalphanumeric characters and hyphens. An ArgumentError …\n"],["validate_component","URI::GID","URI/GID.html#method-i-validate_component","(component)",""],["verify","SignedGlobalID","SignedGlobalID.html#method-i-verify","(sgid, options)",""]]}}